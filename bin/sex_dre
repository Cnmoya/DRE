#!/bin/env python

import os
import argparse
from subprocess import run
from astropy.io import fits


def run_sextractor(image_detection, image_measurement, args):
    input_name_detect = os.path.basename(input_detection).replace('.fits', '')
    input_name_meas = os.path.basename(input_measurements).replace('.fits', '')
    if args.subdir:
        outdir = os.path.join(args.output, input_name_meas)
    else:
        outdir = args.output
    os.makedirs(outdir, exist_ok=True)
    basename = os.path.join(outdir, input_name_meas)

    sex_config = dict()
    sex_config['-c'] = args.config
    sex_config["-CATALOG_NAME"] = f"{basename}_cat.fits"
    sex_config["-CATALOG_TYPE"] = "FITS_LDAC"
    sex_config["-CHECKIMAGE_TYPE"] = "-BACKGROUND,BACKGROUND_RMS,SEGMENTATION"
    sex_config["-CHECKIMAGE_NAME"] = f"{basename}_nb.fits,{basename}_rms.fits,{basename}_seg.fits"

    if args.flags:
        sex_config["-FLAG_IMAGE"] = os.path.join(args.flags, f"{input_name_detect}_flag.fits")

    if args.weights:
        if len(args.weights) == 1:
            weight_image_detect = os.path.join(args.weights[0], f"{input_name_detect}_wht.fits")
            weight_image_meas = weight_image_detect
        elif len(args.weights) == 2:
            weight_image_detect = os.path.join(args.weights[0], f"{input_name_detect}_wht.fits")
            weight_image_meas = os.path.join(args.weights[1], f"{input_name_meas}_wht.fits")
        else:
            raise ValueError("Wrong number of weights directories")
        sex_config["-WEIGHT_IMAGE"] = f"{weight_image_detect},{weight_image_meas}"

    if args.gain:
        sex_config["-GAIN"] = compute_gain(image_measurement, args)

    if args.zero_point:
        sex_config["-MAG_ZEROPOINT"] = args.zero_point

    if args.fwhm:
        sex_config["-SEEING_FWHM"] = args.fwhm

    if args.arg:
        for (arg_name, arg_value) in args.arg:
            sex_config[arg_name] = arg_value

    if args.file:
        for file_arg in args.file:
            arg_name = file_arg[0]
            file_names = []
            for dirname in file_arg[1:]:
                file_names.append(os.path.join(dirname, f"{input_name_meas}_*.fits"))
            sex_config[arg_name] = ','.join(file_names)

    options = [x for item in sex_config.items() for x in item]
    command = ["sex"] + [f"{image_detection},{image_measurement}"] + options
    run(command)


def compute_gain(input_file, args):
    header = fits.getheader(input_file)
    if args.gain.lower() == 'counts':
        gain = get_header_gain(header, args)
    elif args.gain.lower() == 'cps':
        gain = get_header_gain(header, args)
        gain *= header['EXPTIME']
    else:
        try:
            gain = float(args.gain)
        except ValueError:
            raise ValueError(f"{args.gain} is not a valid value for gain")
    str_gain = f"{gain:4.4f}"
    print(f"using GAIN={str_gain}")
    return str_gain


def get_header_gain(header, args):
    if args.gain_key.lower() == 'auto':
        if 'GAIN' in header:
            return header['GAIN']
        else:
            gain_keys = header['*GAIN*']
            if len(gain_keys) == 1:
                return gain_keys[0]
            else:
                raise ValueError(f"Can't find the key for gain in header, please provide one")
    else:
        return header[args.gain_key]


if __name__ == "__main__":

    def parse_arguments():
        parser = argparse.ArgumentParser(description='Wrapper for running SExtractor with DRE parameters')

        parser.add_argument('-i', "--input", help="directory with input images for SExtractor "
                                                  "can be uno directory for single mode or two for dual mode. "
                                                  "In dual mode the images in each filter need to start with "
                                                  "the same identifier followed by a separator (def: Tiles)",
                            default="Tiles", type=str, nargs='+')
        parser.add_argument('-sep', help="separator character between image name and filter (def: '_')",
                            default='_', type=str)
        parser.add_argument('-o', "--output", help="output directory for SExtracted data (def: Sextracted)",
                            type=str, default="Sextracted")
        parser.add_argument('-c', "--config", help="SExtractor configuration file (def: default.sex)",
                            type=str, default="default.sex")
        parser.add_argument('--subdir', help="make a subdirectory for each image", action='store_true')
        parser.add_argument('--flags', help="directory with fits images to be passed as FLAG_IMAGE, "
                                            "must have the same name as the input image but ending in '_flag'",
                            type=str)
        parser.add_argument('--weights', help="directory with fits images to be passed as WEIGHT_IMAGE, "
                                              "must have the same name as the input image but ending in '_wht',"
                                              "can be one for single mode or two for dual mode",
                            type=str, nargs='+')
        parser.add_argument('--gain', help="Can be 'counts' to read from the header and it as GAIN, "
                                           "'cps' to read from the header and use GAIN*EXPOSURE_TIME, "
                                           "or a float  in e-/ADU to be used directly as GAIN", type=str)
        parser.add_argument('--gain-key', help="Header key for gain if 'counts' or 'cps' are used "
                                               "or 'auto' to search in the header (Def: auto)",
                            type=str, default='auto')
        parser.add_argument('-zp', '--zero-point', help="Zero-Point Magnitude", type=str)
        parser.add_argument('-fwhm', help="Value of seeing FWHM", type=str)
        parser.add_argument('--arg', nargs='+', action='append',
                            help="Pass any argument to SExtractor first pass the name of the argument and then "
                                 "the values separated with coma (e.g. --arg PHOT_APERTURES 5,10,20)"
                                 "can be used more than once", type=str)
        parser.add_argument('--file', nargs='+', action='append',
                            help="Pass any file to SExtractor first pass the name of the argument of the input "
                                 "and then the directory containing each file, "
                                 "the file must have the same name of the input except but a suffix"
                                 "(e.g. --file WEIGHT_IMAGE detect_wht photo_wht)"
                                 "can be used more than once", type=str)

        args = parser.parse_args()

        return args

    args_ = parse_arguments()

    if len(args_.input) == 1:
        input_detection, input_measurements = args_.input[0], args_.input[0]
    elif len(args_.input) == 2:
        input_detection, input_measurements = args_.input[0], args_.input[1]
    else:
        raise ValueError("Wrong number of inputs")
    files_detect = os.listdir(input_detection)
    files_meas = os.listdir(input_measurements)
    for i, image_detect in enumerate(sorted(files_detect)):
        name = image_detect.split(args_.sep)[0]
        for image_meas in sorted(files_meas):
            if name in image_meas:
                print(80 * "=")
                print(f"({i + 1}/{len(files_detect)}): {image_meas}")
                run_sextractor(os.path.join(input_detection, image_detect),
                               os.path.join(input_measurements, image_meas),
                               args_)
