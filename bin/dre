#!/bin/env python

import numpy as np
import argparse
from DRE import ModelCPU


if __name__ == "__main__":

    def parse_arguments():
        parser = argparse.ArgumentParser(description='Run DRE with multiprocessing')

        parser.add_argument("-m", "--model", help="models cube file", type=str, default=None)
        parser.add_argument("--psf", help="directory with PSF's (def: PSF)", type=str, default="PSF")
        parser.add_argument("-i", "--input", help="directory with cuts (def: Cuts)",
                            default="Cuts", type=str)
        parser.add_argument("-o", "--output", help="output directory (def: Chi)", type=str, default="Chi")
        parser.add_argument("--mosaics", help="generate mosaics files for visualization", action="store_true")
        parser.add_argument("--cpu", help="Number of cpu's to use", type=int, default=1)
        parser.add_argument("--chunk", help="Max size of the queue", type=int, default=100)
        parser.add_argument("--compression", help="compresion level for the h5 output file,"
                                                  "lower is faster (def: medium)",
                            choices=["none", "low", "medium", "high"], default="medium")
        parser.add_argument("--warn", help="Print numpy warnings", action='store_true')

        args_ = parser.parse_args()

        return args_

    args = parse_arguments()

    if not args.warn:
        np.seterr(all='ignore')

    model = ModelCPU(args.model, args.cpu, args.chunk, args.compression)
    # fit in parallel
    model.fit_dir(args.input, args.output, args.psf)
